# setup.ps1
# True one-click setup script for Windows using PowerShell self-signed certificates

# Create project structure
Write-Host "Creating directory structure..."
New-Item -ItemType Directory -Force -Path "config", "models", "routes", "public\css", "public\uploads", "views", "certs" | Out-Null

# Create package.json
Write-Host "Creating package.json..."
Set-Content -Path "package.json" -Value @'
{
  "name": "mongodb-web-app",
  "version": "1.0.0",
  "main": "server.js",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "bcrypt": "^5.1.1",
    "ejs": "^3.1.9",
    "express": "^4.18.2",
    "express-session": "^1.17.3",
    "mongodb": "^6.3.0",
    "multer": "^1.4.5-lts.1",
    "vhost": "^3.0.2"
  }
}
'@

# Create config files
Write-Host "Creating config files..."
Set-Content -Path "config\database.js" -Value @'
const { MongoClient } = require('mongodb');

const uri = 'mongodb://localhost:27017';
const client = new MongoClient(uri);

async function connectDB() {
    try {
        await client.connect();
        console.log('Connected to MongoDB');
        return client.db('webapp');
    } catch (error) {
        console.error('Database connection error:', error);
    }
}

module.exports = connectDB;
'@

Set-Content -Path "config\permissions.js" -Value @'
const permissions = {
    'customers:read_all': ['admin', 'manager'],
    'customers:read_own': ['admin', 'manager', 'user'],
    'customers:create': ['admin', 'manager', 'user'],
    'customers:delete': ['admin'],
    'users:manage': ['admin'],
};

const roleHierarchy = {
    admin: ['manager', 'user'],
    manager: ['user'],
    user: []
};

function hasPermission(userRole, permission) {
    if (permissions[permission] && permissions[permission].includes(userRole)) {
        return true;
    }
    
    const inheritedRoles = roleHierarchy[userRole] || [];
    return inheritedRoles.some(role => 
        permissions[permission] && permissions[permission].includes(role)
    );
}

module.exports = { permissions, hasPermission };
'@

# Create model files
Write-Host "Creating model files..."
Set-Content -Path "models\User.js" -Value @'
const bcrypt = require('bcrypt');

class User {
    constructor(db) {
        this.collection = db.collection('users');
    }

    async create(username, password, role = 'user', customDomain = null) {
        const validRoles = ['admin', 'manager', 'user'];
        if (!validRoles.includes(role)) {
            throw new Error('Invalid role');
        }
        
        const hashedPassword = await bcrypt.hash(password, 10);
        const user = {
            username,
            password: hashedPassword,
            role,
            customDomain: customDomain || username.toLowerCase(),
            createdAt: new Date()
        };
        return await this.collection.insertOne(user);
    }

    async findByUsername(username) {
        return await this.collection.findOne({ username });
    }

    async findById(id) {
        return await this.collection.findOne({ _id: id });
    }

    async findByCustomDomain(domain) {
        return await this.collection.findOne({ customDomain: domain.toLowerCase() });
    }

    async comparePassword(password, hashedPassword) {
        return await bcrypt.compare(password, hashedPassword);
    }

    async updateCustomDomain(id, newDomain) {
        return await this.collection.updateOne(
            { _id: id },
            { $set: { customDomain: newDomain.toLowerCase() } }
        );
    }
}

module.exports = User;
'@

Set-Content -Path "models\Customer.js" -Value @'
class Customer {
    constructor(db) {
        this.collection = db.collection('customers');
    }

    async create(data) {
        const customer = {
            ...data,
            createdAt: new Date()
        };
        return await this.collection.insertOne(customer);
    }

    async findAll() {
        return await this.collection.find({}).toArray();
    }

    async findByUserId(userId) {
        return await this.collection.find({ userId }).toArray();
    }
}

module.exports = Customer;
'@

# Create route files
Write-Host "Creating route files..."
Set-Content -Path "routes\auth.js" -Value @'
const express = require('express');
const router = express.Router();
const User = require('../models/User');
const { hasPermission } = require('../config/permissions');

router.get('/login', (req, res) => {
    res.render('login');
});

router.get('/signup', (req, res) => {
    res.render('signup');
});

router.post('/signup', async (req, res) => {
    const { username, password, customDomain } = req.body;
    const db = req.app.locals.db;
    const userModel = new User(db);

    try {
        if (customDomain) {
            const existing = await userModel.findByCustomDomain(customDomain);
            if (existing) throw new Error('Custom domain already taken');
        }
        
        await userModel.create(username, password, 'user', customDomain);
        res.redirect('/login');
    } catch (error) {
        res.render('signup', { error: error.message || 'Error creating user' });
    }
});

router.post('/login', async (req, res) => {
    const { username, password } = req.body;
    const db = req.app.locals.db;
    const userModel = new User(db);

    try {
        const user = await userModel.findByUsername(username);
        if (user && await userModel.comparePassword(password, user.password)) {
            req.session.userId = user._id;
            req.session.role = user.role;
            req.session.customDomain = user.customDomain;
            res.redirect('/dashboard');
        } else {
            res.render('login', { error: 'Invalid credentials' });
        }
    } catch (error) {
        res.render('login', { error: 'Login error' });
    }
});

router.get('/logout', (req, res) => {
    req.session.destroy();
    res.redirect('/login');
});

function isAuthenticated(req, res, next) {
    if (req.session.userId) return next();
    res.redirect('/login');
}

function requirePermission(permission) {
    return (req, res, next) => {
        if (!req.session.userId) {
            return res.redirect('/login');
        }
        
        if (!hasPermission(req.session.role, permission)) {
            return res.status(403).render('error', { 
                message: 'Insufficient permissions' 
            });
        }
        next();
    };
}

async function subdomainHandler(req, res, next) {
    const host = req.headers.host;
    const parts = host.split('.');
    
    if (parts.length >= 3) {
        const subdomain = parts[0];
        const db = req.app.locals.db;
        const userModel = new User(db);
        
        const user = await userModel.findByCustomDomain(subdomain);
        if (user) {
            req.subdomainUser = user;
        }
    }
    next();
}

module.exports = { router, isAuthenticated, requirePermission, subdomainHandler };
'@

Set-Content -Path "routes\customer.js" -Value @'
const express = require('express');
const router = express.Router();
const multer = require('multer');
const Customer = require('../models/Customer');
const { requirePermission } = require('./auth');

const storage = multer.diskStorage({
    destination: 'public/uploads/',
    filename: (req, file, cb) => {
        cb(null, Date.now() + '-' + file.originalname);
    }
});
const upload = multer({ storage });

router.get('/form', requirePermission('customers:create'), (req, res) => {
    res.render('customerForm');
});

router.post('/form', 
    requirePermission('customers:create'), 
    upload.single('document'), 
    async (req, res) => {
        const db = req.app.locals.db;
        const customerModel = new Customer(db);

        const customerData = {
            name: req.body.name,
            email: req.body.email,
            phone: req.body.phone,
            document: req.file ? req.file.filename : null,
            userId: req.session.userId
        };

        try {
            await customerModel.create(customerData);
            res.redirect('/dashboard');
        } catch (error) {
            res.render('customerForm', { error: 'Error saving customer data' });
        }
    }
);

router.get('/delete/:id', 
    requirePermission('customers:delete'), 
    async (req, res) => {
        const db = req.app.locals.db;
        const customerModel = new Customer(db);
        
        try {
            await customerModel.collection.deleteOne({ _id: new db.ObjectId(req.params.id) });
            res.redirect('/dashboard');
        } catch (error) {
            res.render('error', { message: 'Error deleting customer' });
        }
    }
);

module.exports = router;
'@

# Create server.js with higher ports
Write-Host "Creating server.js..."
Set-Content -Path "server.js" -Value @'
const express = require('express');
const session = require('express-session');
const https = require('https');
const http = require('http');
const fs = require('fs');
const connectDB = require('./config/database');
const { router: authRoutes, isAuthenticated, requirePermission, subdomainHandler } = require('./routes/auth');
const customerRoutes = require('./routes/customer');

const privateKey = fs.readFileSync('certs\\server.key', 'utf8');
const certificate = fs.readFileSync('certs\\server.crt', 'utf8');
const credentials = { key: privateKey, cert: certificate };

const app = express();

app.set('trust proxy', 1);
app.set('view engine', 'ejs');
app.use(express.urlencoded({ extended: true }));
app.use(express.static('public'));
app.use(session({
    secret: 'your-secret-key',
    resave: false,
    saveUninitialized: false,
    cookie: { 
        secure: true,
        domain: '.localhost',
        httpOnly: true,
        sameSite: 'lax'
    }
}));

function hstsMiddleware(req, res, next) {
    if (req.secure) {
        res.setHeader('Strict-Transport-Security', 
            'max-age=31536000; includeSubDomains; preload'
        );
    }
    next();
}

function redirectToHttps(req, res, next) {
    if (!req.secure) {
        return res.redirect(301, `https://${req.headers.host.replace('3000', '3443')}${req.url}`);
    }
    next();
}

async function startServer() {
    const db = await connectDB();
    app.locals.db = db;

    app.use(hstsMiddleware);
    app.use(subdomainHandler);
    app.use(redirectToHttps);
    
    app.use('/', authRoutes);
    app.use('/customer', customerRoutes);

    app.get('/dashboard', isAuthenticated, async (req, res) => {
        const customerModel = new Customer(db);
        let customers = [];
        
        try {
            const viewingUser = req.subdomainUser || await new User(db).findById(req.session.userId);
            
            if (hasPermission(req.session.role, 'customers:read_all')) {
                customers = await customerModel.findAll();
            } else if (hasPermission(req.session.role, 'customers:read_own')) {
                customers = await customerModel.findByUserId(viewingUser._id);
            }

            res.render('dashboard', { 
                customers,
                role: req.session.role,
                canDelete: hasPermission(req.session.role, 'customers:delete'),
                customDomain: viewingUser.customDomain,
                viewingUser: viewingUser.username
            });
        } catch (error) {
            res.render('error', { message: 'Error loading dashboard' });
        }
    });

    app.get('/settings', isAuthenticated, async (req, res) => {
        const userModel = new User(db);
        const user = await userModel.findById(req.session.userId);
        res.render('settings', { customDomain: user.customDomain });
    });

    app.post('/settings', isAuthenticated, async (req, res) => {
        const { customDomain } = req.body;
        const userModel = new User(db);
        
        try {
            const existing = await userModel.findByCustomDomain(customDomain);
            if (existing && existing._id.toString() !== req.session.userId.toString()) {
                throw new Error('Domain already taken');
            }
            await userModel.updateCustomDomain(req.session.userId, customDomain);
            req.session.customDomain = customDomain;
            res.redirect('/dashboard');
        } catch (error) {
            res.render('settings', { 
                customDomain: req.session.customDomain,
                error: error.message 
            });
        }
    });

    const httpServer = http.createServer((req, res) => {
        res.writeHead(301, { Location: `https://${req.headers.host.replace('3000', '3443')}${req.url}` });
        res.end();
    });

    const httpsServer = https.createServer(credentials, app);

    httpServer.listen(3000, () => {
        console.log('HTTP Server running on port 3000 for redirection');
    });

    httpsServer.listen(3443, () => {
        console.log('HTTPS Server running on port 3443 with HSTS');
    });
}

startServer();
'@

# Create view files
Write-Host "Creating view files..."
Set-Content -Path "views\login.ejs" -Value @'
<!DOCTYPE html>
<html>
<head>
    <title>Login</title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <h1>Login</h1>
    <% if (error) { %>
        <p class="error"><%= error %></p>
    <% } %>
    <form method="POST" action="/login">
        <input type="text" name="username" placeholder="Username" required>
        <input type="password" name="password" placeholder="Password" required>
        <button type="submit">Login</button>
    </form>
    <p>Don't have an account? <a href="/signup">Sign up</a></p>
</body>
</html>
'@

Set-Content -Path "views\signup.ejs" -Value @'
<!DOCTYPE html>
<html>
<head>
    <title>Signup</title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <h1>Signup</h1>
    <% if (error) { %>
        <p class="error"><%= error %></p>
    <% } %>
    <form method="POST" action="/signup">
        <input type="text" name="username" placeholder="Username" required>
        <input type="password" name="password" placeholder="Password" required>
        <input type="text" name="customDomain" placeholder="Custom Domain (optional)">
        <button type="submit">Sign up</button>
    </form>
    <p>Already have an account? <a href="/login">Login</a></p>
</body>
</html>
'@

Set-Content -Path "views\dashboard.ejs" -Value @'
<!DOCTYPE html>
<html>
<head>
    <title>Dashboard</title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <h1>Dashboard</h1>
    <p>Role: <%= role %> | Viewing: <%= viewingUser %>'s Dashboard</p>
    <p>Custom URL: <%= customDomain %>.localhost:3443</p>
    <a href="/customer/form">Add Customer</a>
    <a href="/settings">Settings</a>
    <a href="/logout">Logout</a>
    
    <h2>Customers</h2>
    <table>
        <tr>
            <th>Name</th>
            <th>Email</th>
            <th>Phone</th>
            <th>Document</th>
            <th>User ID</th>
            <% if (canDelete) { %>
                <th>Actions</th>
            <% } %>
        </tr>
        <% customers.forEach(customer => { %>
            <tr>
                <td><%= customer.name %></td>
                <td><%= customer.email %></td>
                <td><%= customer.phone %></td>
                <td>
                    <% if (customer.document) { %>
                        <a href="/uploads/<%= customer.document %>">View</a>
                    <% } %>
                </td>
                <td><%= customer.userId %></td>
                <% if (canDelete) { %>
                    <td>
                        <a href="/customer/delete/<%= customer._id %>" 
                           onclick="return confirm('Are you sure?')">Delete</a>
                    </td>
                <% } %>
            </tr>
        <% }) %>
    </table>
</body>
</html>
'@

Set-Content -Path "views\customerForm.ejs" -Value @'
<!DOCTYPE html>
<html>
<head>
    <title>Customer Form</title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <h1>Add Customer</h1>
    <% if (error) { %>
        <p class="error"><%= error %></p>
    <% } %>
    <form method="POST" action="/customer/form" enctype="multipart/form-data">
        <input type="text" name="name" placeholder="Name" required>
        <input type="email" name="email" placeholder="Email" required>
        <input type="tel" name="phone" placeholder="Phone" required>
        <input type="file" name="document">
        <button type="submit">Submit</button>
    </form>
    <a href="/dashboard">Back to Dashboard</a>
</body>
</html>
'@

Set-Content -Path "views\error.ejs" -Value @'
<!DOCTYPE html>
<html>
<head>
    <title>Error</title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <h1>Error</h1>
    <p><%= message %></p>
    <a href="/dashboard">Back to Dashboard</a>
</body>
</html>
'@

Set-Content -Path "views\settings.ejs" -Value @'
<!DOCTYPE html>
<html>
<head>
    <title>Settings</title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <h1>Settings</h1>
    <% if (error) { %>
        <p class="error"><%= error %></p>
    <% } %>
    <form method="POST" action="/settings">
        <label>Custom Domain</label>
        <input type="text" name="customDomain" value="<%= customDomain %>" required>
        <button type="submit">Update</button>
    </form>
    <a href="/dashboard">Back to Dashboard</a>
</body>
</html>
'@

# Create CSS file
Write-Host "Creating CSS file..."
Set-Content -Path "public\css\style.css" -Value @'
body {
    font-family: Arial, sans-serif;
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
}

input, button {
    display: block;
    margin: 10px 0;
    padding: 5px;
}

.error {
    color: red;
}

table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
}

th, td {
    border: 1px solid #ddd;
    padding: 8px;
    text-align: left;
}

th {
    background-color: #f2f2f2;
}
'@

# Create security.txt
Write-Host "Creating security.txt..."
Set-Content -Path "public\security.txt" -Value @'
Contact: mailto:security@yourdomain.com
Expires: 2026-02-25T00:00:00.000Z
Preferred-Languages: en
Policy: https://yourdomain.com/security-policy
'@

# Generate self-signed certificate using PowerShell
Write-Host "Generating self-signed certificate..."
Set-Location -Path "certs"
try {
    # Create certificate
    $cert = New-SelfSignedCertificate -DnsName "localhost" -CertStoreLocation "cert:\LocalMachine\My" -NotAfter (Get-Date).AddYears(1)
    
    # Export certificate to CRT file
    Export-Certificate -Cert $cert -FilePath "server.crt" -Type CERT | Out-Null
    
    # Export private key to PFX, then convert to PEM
    $pfxPath = "server.pfx"
    $password = ConvertTo-SecureString -String "password" -Force -AsPlainText
    Export-PfxCertificate -Cert $cert -FilePath $pfxPath -Password $password | Out-Null
    
    # Convert PFX to PEM key using certutil (Windows built-in)
    certutil -dump $pfxPath > temp.txt
    $keyContent = Get-Content temp.txt | Where-Object { $_ -match "-----BEGIN.*-----" -or $_ -match "-----END.*-----" -or $_ -match "^[A-Za-z0-9+/=]+$" } | Out-String
    Set-Content -Path "server.key" -Value $keyContent
    Remove-Item temp.txt
    Remove-Item $pfxPath
    
    Write-Host "Self-signed certificate generated successfully" -ForegroundColor Green
} catch {
    Write-Host "Error generating certificate: $_" -ForegroundColor Red
    Write-Host "Falling back to manual generation instructions:"
    Write-Host "Run in PowerShell: New-SelfSignedCertificate -DnsName 'localhost' -CertStoreLocation 'cert:\LocalMachine\My'"
    exit 1
}
Set-Location -Path ".."

# Install dependencies
Write-Host "Installing dependencies..."
npm install

# Start the application
Write-Host "Starting the application..."
Start-Process -FilePath "node" -ArgumentList "server.js" -NoNewWindow

# Open browser
Start-Process "https://localhost:3443"

# Final instructions
Write-Host "Setup complete!" -ForegroundColor Green
Write-Host "The application is running at:"
Write-Host "  - http://localhost:3000 (redirects to HTTPS)"
Write-Host "  - https://localhost:3443"
Write-Host "Note: Accept the self-signed certificate in your browser"
Write-Host "Prerequisites:"
Write-Host "  - Ensure MongoDB is running (install from mongodb.com)"
Write-Host "  - Node.js must be installed (install from nodejs.org)"
Write-Host "For subdomain testing, manually add to C:\Windows\System32\drivers\etc\hosts:"
Write-Host "  127.0.0.1 username.localhost (requires admin rights)"
pause
